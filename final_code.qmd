
```{python}
import pandas as pd
import altair as alt
import numpy as np
import os
import geopandas as gpd

```


# Part I: State Pre-K Metrics Data Cleaning and Storing

## Read in Data

```{python}
# Read in spending data
filepath2 = 'data/state_preschool_spending_2023_0.xlsx'
spending = pd.read_excel(filepath2)
spending.head

# Read in state enrollment data
filepath3 = 'data/state_preschool_enrollment1.xlsx'
enrollment = pd.read_excel(filepath3)
enrollment.head

# Read in quality standards data
filepath4 = 'data/state_preschool_quality_standards_met_0.xlsx'
quality_standards = pd.read_excel(filepath4)
quality_standards.head
```

## Cleaning Spending Data:

```{python}
# print different enrollment variables measured
print(f"the spending variables measured are:")
print(spending['Variable Name'].unique())

# Create columns for each type of spending
spending_wide = spending.pivot_table(index=['State Name', 'Year'], columns='Variable Name', values='Spending (2023 Dollars)', aggfunc='max').reset_index()

# Round the values by 2 to make them easier to read
spending_wide[['All-Reported Spending per Child (2023 Dollars)', 'State Spending per Child (2023 Dollars)', 'Total All-Reported Spending (2023 Dollars)', 'Total State Pre-K Spending (2023 Dollars)']] = spending_wide[['All-Reported Spending per Child (2023 Dollars)', 'State Spending per Child (2023 Dollars)', 'Total All-Reported Spending (2023 Dollars)', 'Total State Pre-K Spending (2023 Dollars)']].round(2)
```

## Cleaning Enrollment Data

```{python}
# print different enrollment variables measured
print(f"the enrollment variables measured are:")
print(enrollment['Variable Name'].unique())

# collapse enrollment data by state and year
# pivot table so each type of enrollment has its own column
enrollment_wide = enrollment.pivot_table(index=['State Name', 'Year'], columns='Variable Name', values='Enrollment', aggfunc='max').reset_index()

# round enrollment columns
enrollment_wide[
    ['Number of 3-year-olds Enrolled in State Pre-K',
    'Number of 4-year-olds Enrolled in State Pre-K',
    'Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K',
    'Total State Pre-K Enrollment']] = enrollment_wide[
    ['Number of 3-year-olds Enrolled in State Pre-K',
    'Number of 4-year-olds Enrolled in State Pre-K',
    'Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K',
    'Total State Pre-K Enrollment']
    ].round(2)

# make percentage column easier to read
enrollment_wide[
    ['Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K']] = enrollment_wide[
    ['Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K']
    ]*100
```

## Cleaning Quality Standards Data

```{python}
# Enter in All State Programs value
quality_standards['Program Name'] = quality_standards['Program Name'].fillna('All State Programs')

# Assign values to standards
quality_standards['Standards Met'] = np.where(quality_standards['Benchmark Met?'] == 'Yes', 1, 0)
quality_standards['Standards Met'] = np.select(
    [
        quality_standards['Benchmark Met?'] == 'Yes',
        quality_standards['Benchmark Met?'] == 'NA - Program level only'
    ],
    [
        1, 
        np.nan  
    ],
    default=0
)

# Find total standards met
standards_avg = quality_standards.groupby(['Year', 'State Name', 'Variable Name'])['Standards Met'].mean().reset_index()

standards_total = standards_avg.groupby(['Year', 'State Name'])['Standards Met'].sum().reset_index()

# Find percentages
standards_total['percentage'] = (standards_total['Standards Met']/10)*100
```

```{python}
# print the benchmarks first measured
early_standards = standards_avg[standards_avg['Year']==2002]

print(f"The previous benchmarks measured were:")
print(early_standards['Variable Name'].unique())

# print the benchmarks now measured
today_standards = standards_avg[standards_avg['Year']==2023]
print(f"The current benchmarks measured are:")
print(today_standards['Variable Name'].unique())
```



## Static Plots

### Top 10 States by Per-Child Spending (2023): Highest and Lowest

```{python}
# filter for only 2023
spending_23 = spending_wide[spending_wide['Year']==2023]

# filter out Guam so only 50 states included
spending_23 = spending_23[spending_23['State Name'] != 'Guam']

# find states who spend the most
# sort by spending per child
spending_top = spending_23.sort_values(by='State Spending per Child (2023 Dollars)', ascending=False)

# get top 10 states
spending_top = spending_top.head(10)
spending_top['placement'] = 'High'

# find states who spend the least
# sort by spending per child
spending_bottom = spending_23.sort_values(by='State Spending per Child (2023 Dollars)', ascending=True)

# get bottom 10 states
spending_bottom = spending_bottom.head(10)
spending_bottom['placement'] = 'Low'

# merge top and bottom
spending_extreme = pd.concat([spending_top, spending_bottom], ignore_index=True)

# map abbreviations for chart readability
abbreviations = {
    'Connecticut': 'CT', 'District of Columbia': 'DC', 'California': 'CA',
    'Oregon': 'OR', 'New Jersey': 'NJ', 'Hawaii': 'HI', 'Pennsylvania': 'PA', 'Washington': 'WA', 'Virginia': 'VA', 'Michigan': 'MI', 'Wyoming': 'WY',
    'Montana': 'MT', 'South Dakota': 'SD', 'Idaho': 'ID', 'Indiana': 'IN',
    'New Hampshire': 'NH', 'Utah': 'UT', 'Nebraska': 'NE', 'Mississippi': 'MS',
    'Florida': 'FL'
}

spending_extreme['abbreviation'] = spending_extreme['State Name'].map(abbreviations)

# sort by spending per child
spending_extreme = spending_extreme.sort_values(by='State Spending per Child (2023 Dollars)', ascending=False)

# create chart
alt.Chart(spending_extreme).mark_bar().encode(
    alt.X('abbreviation:N', 
        title='State',
        sort="-y", 
        axis=alt.Axis(labelAngle=0)),
    alt.Y('State Spending per Child (2023 Dollars):Q', 
        axis=alt.Axis(format='$,.0f')),
    alt.Color('placement:N', 
        legend=None)
).properties(
    title='Top 10 States by Per-Child Spending (2023): Highest and Lowest'
)
```

### Top 10 States by Pre-K Enrollment (2023): Highest and Lowest

```{python}
# filter for only 2023
enrollment_23 = enrollment_wide[enrollment_wide['Year']==2023]

# filter out Guam so only 50 states included
enrollment_23 = enrollment_23[enrollment_23['State Name'] != 'Guam']

# start with top 10 states for enrollment
# sort by percentage of 4s enrolled
enrollment_23 = enrollment_23.sort_values(by='Percentage of 4-year-olds Enrolled in State Pre-K', ascending=False)

# get top 10 states
enrollment_top = enrollment_23.head(10)
enrollment_top['placement'] = 'High'

# now get bottom 10 states
# sort by percentage of 4s enrolled
enrollment_23 = enrollment_23.sort_values(by='Percentage of 4-year-olds Enrolled in State Pre-K', ascending=True)

# get bottom 10 states
enrollment_bottom = enrollment_23.head(10)
enrollment_bottom['placement'] = 'Low'

# merge top and bottom
enrollment_extreme = pd.concat([enrollment_top, enrollment_bottom], ignore_index=True)

# clean values
enrollment_extreme['Percentage of 4-year-olds Enrolled in State Pre-K'] = enrollment_extreme['Percentage of 4-year-olds Enrolled in State Pre-K'].round(0)

# transform back to decimals for chart
enrollment_extreme['Percentage of 4-year-olds Enrolled in State Pre-K'] = enrollment_extreme['Percentage of 4-year-olds Enrolled in State Pre-K']/100

# map abbreviations for chart readability
abbreviations = {
    'District of Columbia': 'DC','Oklahoma': 'OK', 'West Virginia': 'WV',
    'Florida': 'FL', 'Iowa': 'IA', 'Vermont': 'VT', 'Wisconsin': 'WI',
    'New York':'NY', 'Georgia':'GA', 'Texas': 'TX', 'Wyoming': 'WY',
    'Montana': 'MT', 'South Dakota': 'SD', 'Idaho': 'ID', 'Indiana': 'IN',
    'New Hampshire': 'NH', 'Utah': 'UT', 'Arizona': 'AZ', 'Hawaii': 'HI',
    'North Dakota': 'ND'
}
enrollment_extreme['abbreviation'] = enrollment_extreme['State Name'].map(abbreviations)

# sort by percentage of 4s enrolled
enrollment_extreme = enrollment_extreme.sort_values(by='Percentage of 4-year-olds Enrolled in State Pre-K', ascending=False)

# plot top 10 states
alt.Chart(enrollment_extreme).mark_bar().encode(
    alt.X('abbreviation:N', 
        title='State',
        sort="-y",
        axis=alt.Axis(labelAngle=0)),
    alt.Y('Percentage of 4-year-olds Enrolled in State Pre-K:Q', 
        axis=alt.Axis(format='%')),
    alt.Color('placement:N', 
        legend=None)
).properties(
    title='Top 10 States by Pre-K Enrollment (2023): Highest and Lowest'
)
```

### Top 10 States with Most and Least Quality Standards Met

```{python}
# filter for only 2023
standards_23 = standards_total[standards_total['Year']==2023]

# filter out Guam and National so only 50 states included
standards_23 = standards_23[standards_23['State Name'] != 'Guam']
standards_23 = standards_23[standards_23['State Name'] != 'National']

# find top 10 states by standards met
# sort by standards met
standards_23 = standards_23.sort_values(by='Standards Met', ascending=False)
# get top 10 states
standards_top = standards_23.head(10)
standards_top['placement'] = 'High'

# find bottom 10 states by standards met
# sort by standards met
standards_bottom = standards_23.sort_values(by='Standards Met', ascending=True)
# get bottom 10 states
standards_bottom = standards_bottom.head(10)
standards_bottom['placement'] = 'Low'

# merge top and bottom
standards_extreme = pd.concat([standards_top, standards_bottom], ignore_index=True)

# clean values
standards_extreme['Standards Met'] = standards_extreme['Standards Met'].astype(int)

# map abbreviations for chart readability
abbreviations = {
    'Alabama': 'AL', 'Hawaii': 'HI', 'Rhode Island': 'RI',
    'Mississippi': 'MS', 'Michigan': 'MI', 'North Carolina': 'NC',
    'New Mexico': 'NM', 'New Jersey': 'NJ', 'Tennessee': 'TN', 'Oklahoma': 'OK',
    'Wyoming': 'WY', 'Montana': 'MT', 'South Dakota': 'SD', 'Idaho': 'ID', 'Indiana': 'IN', 'New Hampshire': 'NH', 'Wisconsin': 'WI', 'Arizona': 'AZ', 'Alaska': 'AK', 'Missouri': 'MO'
}
standards_extreme['abbreviation'] = standards_extreme['State Name'].map(abbreviations)

# sort data for plot
standards_extreme = standards_extreme.sort_values(by='Standards Met', ascending=False)
# plot top 10 states
alt.Chart(standards_extreme).mark_bar().encode(
    alt.X('abbreviation:N', 
        title='State',
        sort='-y', 
        axis=alt.Axis(labelAngle=0)),
    alt.Y('Standards Met:Q'),
    alt.Color('placement:N', 
        legend=None)
).properties(
    title='Top 10 States with Most and Least Quality Standards Met'
)
```

### Duplicate States in Charts
```{python}
combined = pd.concat([spending_extreme['State Name'], standards_extreme['State Name'], enrollment_extreme['State Name']], ignore_index=True)

# Find duplicate values
duplicates = combined[combined.duplicated(keep=False)].unique()

# Convert duplicates to a list
duplicates_list = duplicates.tolist()

print("Duplicate State Names:", duplicates_list)
```

## Merge Data and Save to .csv

```{python}
preschool_stats = spending_wide.merge(enrollment_wide, on=['Year', 'State Name'], how='inner')
preschool_stats = preschool_stats.merge(standards_total, on=['Year', 'State Name'], how='inner')
#preschool_stats['year'] = preschool_stats['Year'].dt.year
folder_path = 'data'
os.makedirs(folder_path, exist_ok=True)
file_path = os.path.join(folder_path, 'preschool_stats.csv')
preschool_stats.to_csv(file_path, index=False)
```

# Part II: Creating GeoDataFrame

## Read in Data

```{python}
usa_map = gpd.read_file("data/cb_2018_us_state_500k.zip")
```

## Merge GeoData with Main DataFrame

```{python}
# view usa_map
usa_map.head()

# rename state column to merge and id column for shiny app
usa_map = usa_map.rename(columns={
    'NAME': 'State Name',
    'GEOID': 'id'})

# merge usa_map with preschool_stats
preschool_geometry = preschool_stats.merge(usa_map, on=['State Name'], how='inner')

# turn into GeoDataFrame
preschool_geometry = gpd.GeoDataFrame(preschool_geometry, geometry=preschool_geometry['geometry'])

# prep code for shiny app
preschool_geometry['Year'] = preschool_geometry['Year'].astype(str)

# make dataframe smaller
preschool_geometry.drop(
    ['Total All-Reported Spending (2023 Dollars)',
    'Number of 3-year-olds Enrolled in State Pre-K',
    'Number of 4-year-olds Enrolled in State Pre-K',
    'STATEFP',
    'STATENS',
    'AFFGEOID',
    'LSAD',
    'ALAND',
    'AWATER'
],  axis=1, 
    inplace=True
)
```

## Save Data to .csv

```{python}
folder_path = 'data'
os.makedirs(folder_path, exist_ok=True)
file_path = os.path.join(folder_path, 'preschool_geometry.csv')
preschool_geometry.to_csv(file_path, index=False)
```