
```{python}
import pandas as pd
import altair as alt
import numpy as np
import os
```

```{python}
# Read in data

# Read in head start & special ed enrollment data
filepath = 'data/head_start_and_special_education_enrollment1.xlsx'
head_start_enrollment = pd.read_excel(filepath)
head_start_enrollment.head

# Read in spending data
filepath2 = 'data/state_preschool_spending_2023_0.xlsx'
spending = pd.read_excel(filepath2)
spending.head

# Read in state enrollment data
filepath3 = 'data/state_preschool_enrollment1.xlsx'
enrollment = pd.read_excel(filepath3)
enrollment.head

# Read in quality standards data
filepath4 = 'data/state_preschool_quality_standards_met_0.xlsx'
quality_standards = pd.read_excel(filepath4)
quality_standards.head
```


```{python}
# See if Illinois has enough data to be interesting
illinois_spending = spending[spending['State Name']=='Illinois']
illinois_enrollment = enrollment[enrollment['State Name']=='Illinois']
illinois_standards = quality_standards[quality_standards['State Name']=='Illinois']
illinois_spending = illinois_spending.drop(columns='Program Name')
illinois_spending_wide = illinois_spending.pivot(index=['State Name', 'Year'], columns='Variable Name', values='Spending (2023 Dollars)').reset_index()

```

```{python}
illinois_spending_wide['Year'] = pd.to_datetime(illinois_spending_wide['Year'], format='%Y')
illinois_spending_chart = alt.Chart(illinois_spending_wide).mark_line().encode(
   alt.X('Year'),
   alt.Y('Total State Pre-K Spending (2023 Dollars)')
)
illinois_spending_chart
```

```{python}
# Create columns for each type of spending
spending_wide = spending.pivot_table(index=['State Name', 'Year'], columns='Variable Name', values='Spending (2023 Dollars)', aggfunc='max').reset_index()

# Round the values by 2 to make them easier to read
spending_wide[['All-Reported Spending per Child (2023 Dollars)', 'State Spending per Child (2023 Dollars)', 'Total All-Reported Spending (2023 Dollars)', 'Total State Pre-K Spending (2023 Dollars)']] = spending_wide[['All-Reported Spending per Child (2023 Dollars)', 'State Spending per Child (2023 Dollars)', 'Total All-Reported Spending (2023 Dollars)', 'Total State Pre-K Spending (2023 Dollars)']].round(2)

# Convert int to datetime
spending_wide['Year'] = pd.to_datetime(spending_wide['Year'], format='%Y')

# Create date column 
spending_wide = spending_wide.rename(columns={
    'Year': 'Date'
})

# Create year as an int column
spending_wide['Year'] = spending_wide['Date'].dt.year

# create illinois spending
il_spending = spending_wide[spending_wide['State Name']=='Illinois']
```

```{python}
alt.Chart(spending_wide).mark_line().encode(
   x=alt.X('Date:T'),
   y=alt.Y('Total State Pre-K Spending (2023 Dollars):Q', format='$'),
   color=alt.Color('State Name')
)
```

```{python}
print(list(quality_standards['Variable Name'].unique()))

print((quality_standards['Variable Name'].nunique()))
# ChatGPT Question: How to create a new column that takes yes no na values from another column and makes yes=1 and everythig else=0
quality_standards['Standards Met'] = np.where(quality_standards['Benchmark Met?'] == 'Yes', 1, 0)

standards_total = quality_standards.groupby(['State Name', 'Year']).sum().reset_index()
```


```{python}
enrollment['Variable Name'].unique()

# collapse enrollment data by state and year
# pivot table so each type of enrollment has its own column
enrollment_wide = enrollment.pivot_table(index=['State Name', 'Year'], columns='Variable Name', values='Enrollment', aggfunc='max').reset_index()

# round enrollment columns
enrollment_wide[
    ['Number of 3-year-olds Enrolled in State Pre-K',
    'Number of 4-year-olds Enrolled in State Pre-K',
    'Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K',
    'Total State Pre-K Enrollment']] = enrollment_wide[
    ['Number of 3-year-olds Enrolled in State Pre-K',
    'Number of 4-year-olds Enrolled in State Pre-K',
    'Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K',
    'Total State Pre-K Enrollment']
    ].round(2)
enrollment_wide[
    ['Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K']] = enrollment_wide[
    ['Percentage of 3-year-olds Enrolled in State Pre-K',
    'Percentage of 4-year-olds Enrolled in State Pre-K']
    ]*100

# plot enrollment trends
enrollment_chart = alt.Chart(enrollment_wide).mark_line().encode(
   alt.X('Year:T'),
   alt.Y('Number of 4-year-olds Enrolled in State Pre-K:Q'),
   alt.Color('State Name')
)

enrollment_chart

```

```{python}
illinois_enrollment = enrollment_wide[enrollment_wide['State Name']=='Illinois']

il_enrollment_chart = alt.Chart(illinois_enrollment).mark_line().encode(
    alt.X('Year:T'),
    alt.Y('Number of 4-year-olds Enrolled in State Pre-K:Q')
)

il_enrollment_chart = alt.Chart(illinois_enrollment).mark_line().encode(
    alt.X('Year:T'),
    alt.Y('Total State Pre-K Enrollment:Q')
)
il_enrollment_chart
```

```{python}
il_preschool_stats = il_spending.merge(illinois_enrollment, on=['Date', 'State Name', 'Year'], how='inner')
```


```{python}
il_e_x_s_chart = alt.Chart(il_preschool_stats).transform_calculate(
    SpendingInMillions='datum["Total State Pre-K Spending (2023 Dollars)"] / 1000000'
).mark_circle(size=60).encode(
    x=alt.X(
        'SpendingInMillions:Q',
        axis=alt.Axis(
            format='$,.0f',  # Format with one decimal place
            title='Total Illinois Pre-K Spending (Millions of Dollars)'
        ),
        scale=alt.Scale(
            domain=[
                il_preschool_stats['Total State Pre-K Spending (2023 Dollars)'].min() / 1000000,
                il_preschool_stats['Total State Pre-K Spending (2023 Dollars)'].max() / 1000000
            ]
        )
    ),
    y=alt.Y(
        'Total State Pre-K Enrollment:Q',
        axis=alt.Axis(title='Total Illinois Pre-K Enrollment')
    ),
    tooltip=[
        'State Name',
        'Total State Pre-K Spending (2023 Dollars):Q',
        'Total State Pre-K Enrollment'
    ]
).properties(
    title='Illinois Spending vs Enrollment'
)

trend_line = alt.Chart(il_preschool_stats).transform_calculate(
    SpendingInMillions='datum["Total State Pre-K Spending (2023 Dollars)"] / 1000000'
).transform_regression(
    'SpendingInMillions', 'Total State Pre-K Enrollment'
).mark_line(color='red').encode(
    x='SpendingInMillions:Q',
    y='Total State Pre-K Enrollment:Q'
)

# Combine scatter plot and trend line
il_enrollment_chart = (il_e_x_s_chart + trend_line).interactive()

il_enrollment_chart
```
```{python}
# Enter in All State Programs value
quality_standards['Program Name'] = quality_standards['Program Name'].fillna('All State Programs')

# Assign values to standards
quality_standards['Standards Met'] = np.where(quality_standards['Benchmark Met?'] == 'Yes', 1, 0)
quality_standards['Standards Met'] = np.select(
    [
        quality_standards['Benchmark Met?'] == 'Yes',
        quality_standards['Benchmark Met?'] == 'NA - Program level only'
    ],
    [
        1, 
        np.nan  
    ],
    default=0
)

# Find total standards met
standards_avg = quality_standards.groupby(['Year', 'State Name', 'Variable Name'])['Standards Met'].mean().reset_index()

standards_total = standards_avg.groupby(['Year', 'State Name'])['Standards Met'].sum().reset_index()

# Find percentages
standards_total['percentage'] = (standards_total['Standards Met']/10)*100
```

```{python}
il_quality = standards_total[standards_total['State Name']=='Illinois']
il_preschool_stats = il_preschool_stats.merge(il_quality, on=['Year', 'State Name'], how='inner')
```

```{python}
il_q_x_s_chart = alt.Chart(il_preschool_stats).transform_calculate(
    SpendingInMillions='datum["Total State Pre-K Spending (2023 Dollars)"] / 1000000'
).mark_circle(size=60).encode(
    x=alt.X(
        'SpendingInMillions:Q',
        axis=alt.Axis(
            format='$,.0f',  # Format with one decimal place
            title='Total Illinois Pre-K Spending (Millions of Dollars)'
        ),
        scale=alt.Scale(
            domain=[
                il_preschool_stats['Total State Pre-K Spending (2023 Dollars)'].min() / 1000000,
                il_preschool_stats['Total State Pre-K Spending (2023 Dollars)'].max() / 1000000
            ]
        )
    ),
    y=alt.Y(
        'percentage:Q',
        axis=alt.Axis(title='Percentage of Pre-K Quality Standards Met')
    ),
    tooltip=[
        'State Name',
        'Total State Pre-K Spending (2023 Dollars):Q',
        'percentage'
    ]
).properties(
    title='Illinois Spending vs Percentage of Pre-K Quality Standards Met'
)

trend_line = alt.Chart(il_preschool_stats).transform_calculate(
    SpendingInMillions='datum["Total State Pre-K Spending (2023 Dollars)"] / 1000000'
).transform_regression(
    'SpendingInMillions', 'percentage'
).mark_line(color='red').encode(
    x='SpendingInMillions:Q',
    y='percentage:Q'
)

# Combine scatter plot and trend line
il_quality_chart = (il_q_x_s_chart + trend_line).interactive()

il_quality_chart + trend_line
```

```{python}
preschool_stats = spending_wide.merge(enrollment_wide, on=['Year', 'State Name'], how='inner')
preschool_stats = preschool_stats.merge(standards_total, on=['Year', 'State Name'], how='inner')
#preschool_stats['year'] = preschool_stats['Year'].dt.year
folder_path = 'data'
os.makedirs(folder_path, exist_ok=True)
file_path = os.path.join(folder_path, 'preschool_stats.csv')
preschool_stats.to_csv(file_path, index=False)
```

https://drive.google.com/file/d/1an43aqHepcXeK8w58ZgojYH7KKxh8lNa/view?usp=sharing 